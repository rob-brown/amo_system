# Untitled notebook

```elixir
Mix.install([
  {:challonge, github: "rob-brown/amo_system", subdir: "apps/challonge"},
  {:submission_info, github: "rob-brown/amo_system", subdir: "apps/submission_info"},
  {:jason, "~> 1.4"},
  {:amqp, "~> 3.3"},
  {:kino, "~> 0.10.0"}
])
```

## Setup RabbitMQ

The first thing to do is to start up a connection to the RabbitMQ broker. If you are running
this on a Raspberry Pi with the default domain name and port, then you just need to enter
the username and password you previously set up.

```elixir
username_input = Kino.Input.text("Username") |> Kino.render()
password_input = Kino.Input.text("Password") |> Kino.render()
domain_input = Kino.Input.text("Domain", default: "raspberrypi.local") |> Kino.render()
port_input = Kino.Input.number("Port", default: 5672) |> Kino.render()
:ok
```

If you input the correct info, the following cell will create an `AMQP.Channel`.

```elixir
username = Kino.Input.read(username_input)
password = Kino.Input.read(password_input)
domain = Kino.Input.read(domain_input)
port = Kino.Input.read(port_input)

exchange = "rabbit_driver.topic"

url = "amqp://#{username}:#{password}@#{domain}:#{port}"
```

```elixir
{:ok, conn} = AMQP.Connection.open(url)
{:ok, channel} = AMQP.Channel.open(conn)
```

Now to set up some code to handle all the boilerplate of sending and receiving RabbitMQ 
messages. Like a `GenServer` the `Rabbit.cast` function is used to send a message and not worry
about a response. The `Rabbit.call` function sends a request and expects a response back.

For the payload, you may send a string or a map. Any maps will be encoded into JSON format for 
you. The JSON responses are automatically decoded into a map.

```elixir
defmodule Rabbit do
  def cast(channel, exchange, topic, payload = %{}) do
    cast(channel, exchange, topic, Jason.encode!(payload))
  end

  def cast(channel, exchange, topic, "" <> payload) do
    AMQP.Basic.publish(channel, exchange, topic, payload)
  end

  def call(channel, exchange, topic, payload, opts \\ [])

  def call(channel, exchange, topic, payload = %{}, opts) do
    call(channel, exchange, topic, Jason.encode!(payload), opts)
  end

  def call(channel, exchange, topic, "" <> payload, opts) do
    id =
      :erlang.unique_integer()
      |> :erlang.integer_to_binary()
      |> Base.encode64()

    timeout = Keyword.get(opts, :timeout_ms, :timer.seconds(5))
    reply_queue = Keyword.get(opts, :reply_to)

    queue =
      if reply_queue do
        reply_queue
      else
        {:ok, %{queue: queue}} =
          AMQP.Queue.declare(channel, "", exclusive: true, auto_delete: true)

        queue
      end

    me = self()

    {:ok, tag} =
      AMQP.Queue.subscribe(channel, queue, fn
        payload, meta = %{correlation_id: ^id} ->
          send(me, {:ok, payload, meta})

        _payload, _meta ->
          :ok
      end)

    AMQP.Basic.publish(channel, exchange, topic, payload,
      reply_to: queue,
      correlation_id: id
    )

    await(channel, tag, timeout)
  end

  defp await(channel, tag, timeout) do
    receive do
      {:ok, payload, meta} ->
        AMQP.Queue.unsubscribe(channel, tag)
        json = Jason.decode!(payload)
        {:ok, json, meta}

      _ ->
        await(channel, tag, timeout)
    after
      timeout ->
        AMQP.Queue.unsubscribe(channel, tag)
        {:error, :timeout}
    end
  end
end
```

Here are a few more helper functions. You can call `cast.(topic, payload)` for example instead
of `Rabbit.cast(channel, exchange, topic, payload)`. It's shorter and avoids needing to pass
in the channel and exchange.

```elixir
cast = fn topic, payload ->
  Rabbit.cast(channel, exchange, topic, payload)
end

call = fn topic, payload ->
  Rabbit.call(channel, exchange, topic, payload)
end

call_with_opts = fn topic, payload, opts ->
  Rabbit.call(channel, exchange, topic, payload, opts)
end
```

<!-- livebook:{"branch_parent_index":0} -->

## Screenshot

This section has some cells that are useful for debugging your capture card. Or you can use this
to get screenshots that you can then modify for use as targets in your automation.

<blockquote style="background-color:#F5FF7B; color:black">
ðŸ’¡ This section runs in parallel with other code. That way you can watch the 
continuous screen capture while running something else. You can skip over this section if you
don't need it. </blockquote>

First, is some basic code to handle requesting and handling the image. 
</blockquote>

```elixir
defmodule Screenshot do
  def capture(channel, exchange, fun, opts \\ []) do
    {:ok, json, _meta} =
      Rabbit.call(channel, exchange, "image.screenshot", %{timeout_ms: 1000}, opts)

    bytes = Base.decode64!(json["screenshot"]["bytes"])

    fun.(bytes)
  rescue
    _error ->
      nil
  end

  def capture_forever(channel, exchange, delay, fun) do
    # Create a queue so we don't make a new one with each request.
    {:ok, %{queue: queue}} = AMQP.Queue.declare(channel, "", exclusive: true, auto_delete: true)

    capture(channel, exchange, fun, reply_to: queue)
    Process.sleep(delay)
    capture_forever(channel, exchange, delay, fun)
  end
end
```

The next cell will capture a single image and display it. It's most useful for when grabbing an
image to use as an automation target. If the full image doesn't appear completely, then run the
cell again.

You will notice the screenshot appears squished. This is because the capture card is using a 
resolution of 640x480 which is a 4x3 ratio. The Switch normally runs a 16x9 ratio. This is 
expected and not a problem.

```elixir
image =
  Screenshot.capture(channel, exchange, fn bytes ->
    bytes
  end)
```

```elixir
bytes = image |> Base.encode64()
data_url = "data:image/png;base64,#{bytes}"

cast.("image.put", %{name: "homescreen.png", bytes: data_url})
```

```elixir
call.("image.list", %{})
```

```elixir
call.("image.visible", %{name: "homescreen.png"})
```

This next cell will continuously capture images every few seconds. You can change the capture
rate. It's a number in milliseconds. Or you can use the `:timer.seconds` function. Be sure to 
click the <strong>Stop</strong> button when you are done watching.

```elixir
frame = Kino.Frame.new() |> Kino.render()

Screenshot.capture_forever(channel, exchange, :timer.seconds(5), fn bytes ->
  Kino.Frame.render(frame, bytes)
end)
```

## Scripting

```elixir
script = """
for i = 0,10,1
do
  press("left", 200)
  press("left", 200)
  press("right", 200)
  press("right", 200)
end
"""

call_with_opts.("script.run", %{raw: script, timeout_ms: 20_000}, timeout_ms: 20_000)
```

```elixir
script = """
press("right", 200)
press("a", "1s")
press("b")
"""

cast.("script.put", %{name: "test.lua", bytes: Base.encode64(script)})
```

```elixir
call.("script.list", %{})
```

```elixir
call.("script.list", %{name: "test.lua"})
```

```elixir
call_with_opts.("script.run", %{name: "test.lua", timeout_ms: 5000}, timeout_ms: 5000)
```

<!-- livebook:{"branch_parent_index":0} -->

## Squad Strike Automation

To run the automation, we first send some target images that we want to look for. They are 
usually small, unambiguous parts fo the screen.

![](img/ready_to_fight.png)

The scripts will reference these images. Typically checking if the image is visible, waiting until it becomes visible, or waiting until it disappears.

These images are dependent on the screen resolution of the capture card. If you don't use 
**640x480** as your resolution, then you must update all the images accordingly.

```elixir
images = ~w[kirby.png pointer.png ready_to_fight.png]
dir = Path.join(__DIR__, "img")

for img <- images do
  bytes = img |> Path.expand(dir) |> File.read!() |> Base.encode64()
  data_url = "data:image/png;base64,#{bytes}"

  cast.("image.put", %{name: img, bytes: data_url})
end
```

You can then check that the images were uploaded. Other images may also be present.

```elixir
call.("image.list", %{})
```

The automations also need the scripts. The scripts can be sent and run in the same message. Though for scripts that are run frequently, we can save some time but sending them upfront and then referencing them later.

The scripts are written in Lua. This is an embedded programming language that is able to safely call into the original Elixir code without recompiling.

```elixir
scripts = %{
  launch_ssbu_to_squad_strike: """
  -- Focus on first game.
  -- Assumes this is the desired game.
  press("home")
  wait("1500ms")
  -- Open game
  press("a")
  wait("2s")
  -- Select first player account.
  press("a", "500ms")
  -- Wait a long time for game to launch.
  wait_until_found("kirby.png", "40s")
  -- Skip intro video to title screen.
  press("a")
  wait("2s")
  -- Advance to game menu.
  press("a")
  wait("4s")
  -- Select Smash mode.
  press("a")
  wait("1s")
  -- Navigate to Squad Strike menu.
  press("down")
  press("left")
  press("a")
  wait("4s")
  -- Select first rule set.
  press("a")
  wait("4s")
  -- Select 3-on-3 mode.
  press("a")
  wait("2s")
  """,
  close_game: """
  -- Go to home screen.
  -- If on home screen, focus on running game.
  press("home")
  wait("700ms")
  -- Trigger game close.
  press("x")
  wait("700ms")
  -- Ackknowledge game close.
  press("a")
  wait("1s")
  """,
  load_squad_strike: """
  -- Press button to wake-up controller if needed.
  press("x")

  -- Load FP1
  load_amiibo_binary(amiibo1)
  move_pointer("pointer.png", {30, 125}, {65, 140})
  press("a")
  wait("200ms")
  press("a")
  wait("5s")

  -- Load FP2
  load_amiibo_binary(amiibo2)
  move_pointer("pointer.png", {30, 253}, {65, 270})
  press("a")
  wait("200ms")
  press("a")
  wait("5s")

  -- Load FP3
  load_amiibo_binary(amiibo3)
  move_pointer("pointer.png", {30, 385}, {65, 400})
  press("a")
  wait("200ms")
  press("a")
  wait("5s")

  -- Load FP4
  load_amiibo_binary(amiibo4)
  move_pointer("pointer.png", {595, 385}, {605, 400})
  press("a")
  wait("200ms")
  press("a")
  wait("5s")

  -- Load FP5
  load_amiibo_binary(amiibo5)
  move_pointer("pointer.png", {595, 253}, {615, 270})
  press("a")
  wait("200ms")
  press("a")
  wait("5s")

  -- Load FP6
  load_amiibo_binary(amiibo6)
  move_pointer("pointer.png", {595, 125}, {615, 140})
  press("a")
  wait("200ms")
  press("a")
  wait("5s")

  -- Move pointer out of the way to count the loaded FPs.
  press("up", "400ms")

  -- Take a screenshot to later check if any matchups loaded wrong.
  press("capture")

  -- Clear the amiibo to avoid problems later.
  clear_amiibo()
  """,
  squad_start: """
  -- Acknowledge character selection.
  press("plus")
  wait("5s")
  -- Randomize the squad.
  press("x")
  wait("5s")
  -- Start the match.
  press("a")
  wait("2s")
  """
}

for {name, script} <- scripts do
  payload = %{name: "#{name}.lua", bytes: script}
  cast.("script.put", payload)
end
```

Similarly, you can check that the scripts were uploaded.

```elixir
call.("script.list", %{})
```

```elixir
timeout = :timer.minutes(2)

call_with_opts.("script.run", %{name: "launch_ssbu_to_squad_strike.lua", timeout_ms: timeout},
  timeout_ms: timeout
)
```

```elixir
timeout = :timer.minutes(2)

# TODO: Set up the tournament.

amiibo_files = []

inputs =
  amiibo_files
  |> Enum.with_index(1)
  |> Map.new(fn {file, n} ->
    bytes = file |> File.read!() |> Base.encode64()
    data_url = "data:application/octet-stream,#{bytes}"
    {"amiibo#{n}", data_url}
  end)

call_with_opts.(
  "script.run",
  %{name: "load_squad_strike.lua", timeout_ms: timeout, inputs: inputs},
  timeout_ms: timeout
)
```
